                                                                                                Memory usage: ▁▁▁▂▂▃▃▃▃▄▄▅▅▆▆▆▇▇▇██████▇▇ (max: 270.385 MB, growth rate:  81%)                                                                                                 
                                                                  /global/homes/j/jpga/Repositories/Bmad-X/dev/torch_module_profiling/torch_module_profiling.py: % of time =   0.00% (0.000ms) out of 1.604s.                                                                  
       ╷       ╷       ╷       ╷        ╷       ╷               ╷       ╷                                                                                                                                                                                                      
       │Time   │–––––– │–––––– │Memory  │–––––– │–––––––––––    │Copy   │                                                                                                                                                                                                      
  Line │Python │native │system │Python  │peak   │timeline/%     │(MB/s) │/global/homes/j/jpga/Repositories/Bmad-X/dev/torch_module_profiling/torch_module_profiling.py                                                                                                         
╺━━━━━━┿━━━━━━━┿━━━━━━━┿━━━━━━━┿━━━━━━━━┿━━━━━━━┿━━━━━━━━━━━━━━━┿━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸
     1 │       │       │       │        │       │               │       │#from scalene import scalene_profiler                                                                                                                                                                 
     2 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
     3 │       │       │       │        │       │               │       │import sys                                                                                                                                                                                            
     4 │       │       │       │        │       │               │       │#print(sys.argv)                                                                                                                                                                                      
     5 │       │       │       │        │       │               │       │n_particles = int(sys.argv[1])                                                                                                                                                                        
     6 │       │       │       │        │       │               │       │n_quadrupoles = int(sys.argv[2])                                                                                                                                                                      
     7 │       │       │       │        │       │               │       │n_slices = int(sys.argv[3])                                                                                                                                                                           
     8 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
     9 │       │       │       │  62%   │   60M │▁▁▁▁▁▁  22%    │    63 │import torch                                                                                                                                                                                          
    10 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    11 │       │       │       │        │       │               │       │from bmadx import Particle, Drift, Quadrupole, track_lattice, M_ELECTRON                                                                                                                              
    12 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    13 │       │       │       │        │       │               │       │def create_gaussian_beam(n_particles, mean, cov, s, p0c, mc2):                                                                                                                                        
    14 │       │       │       │        │       │               │       │    torch.manual_seed(0)                                                                                                                                                                              
    15 │       │       │       │        │       │               │       │    dist = torch.distributions.multivariate_normal.MultivariateNormal(mean, cov)                                                                                                                      
    16 │       │       │       │        │       │               │       │    coords = dist.sample(torch.Size([n_particles])) # particles' coordinates                                                                                                                          
    17 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    18 │       │       │       │        │       │               │       │    return Particle(*coords.T, s, p0c, mc2)                                                                                                                                                           
    19 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    20 │       │       │       │        │       │               │       │class BeamlineModel(torch.nn.Module):                                                                                                                                                                 
    21 │       │       │       │        │       │               │       │    def __init__(self, k_set, l_d, l_q, beam_in, sigma_t):                                                                                                                                            
    22 │       │       │       │        │       │               │       │        super().__init__()                                                                                                                                                                            
    23 │       │       │       │        │       │               │       │        self.register_parameter('k_set', torch.nn.Parameter(k_set))                                                                                                                                   
    24 │       │       │       │        │       │               │       │        self.l_d = l_d                                                                                                                                                                                
    25 │       │       │       │        │       │               │       │        self.l_q = l_q                                                                                                                                                                                
    26 │       │       │       │        │       │               │       │        self.beam_in = beam_in                                                                                                                                                                        
    27 │       │       │       │        │       │               │       │        self.sigma_t = sigma_t                                                                                                                                                                        
    28 │       │       │       │        │       │               │       │    def forward(self):                                                                                                                                                                                
    29 │       │       │       │        │       │               │       │        # create lattice                                                                                                                                                                              
    30 │       │       │       │        │       │               │       │        lattice = []                                                                                                                                                                                  
    31 │       │       │       │        │       │               │       │        half_drift = Drift( L = self.l_d/2)                                                                                                                                                           
    32 │       │       │       │        │       │               │       │        for k in self.k_set:                                                                                                                                                                          
    33 │       │       │       │        │       │               │       │            lattice.append( half_drift )                                                                                                                                                              
    34 │       │       │       │        │       │               │       │            lattice.append( Quadrupole(L = self.l_q,                                                                                                                                                  
    35 │       │       │       │        │       │               │       │                                       K1 = k,                                                                                                                                                        
    36 │       │       │       │        │       │               │       │                                       NUM_STEPS = n_slices) )                                                                                                                                        
    37 │       │       │       │        │       │               │       │            lattice.append( half_drift )                                                                                                                                                              
    38 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    39 │       │       │       │  14%   │  210M │▃▃▃▄▅▅▆▆▆  78% │   109 │        beam_out = track_lattice(self.beam_in, lattice)                                                                                                                                               
    40 │       │       │       │        │       │               │       │        dx = beam_out.x.std() - self.sigma_t                                                                                                                                                          
    41 │       │       │       │        │       │               │       │        dy = beam_out.y.std() - self.sigma_t                                                                                                                                                          
    42 │       │       │       │        │       │               │       │        delta = torch.sqrt( dx**2 + dy**2 )                                                                                                                                                           
    43 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    44 │       │       │       │        │       │               │       │        return delta                                                                                                                                                                                  
    45 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    46 │       │       │       │        │       │               │       │# model constants                                                                                                                                                                                     
    47 │       │       │       │        │       │               │       │l_d = 0.9 # drift length                                                                                                                                                                              
    48 │       │       │       │        │       │               │       │l_q = 0.1 # quad length                                                                                                                                                                               
    49 │       │       │       │        │       │               │       │sigma_t = 5e-3 # target beam size                                                                                                                                                                     
    50 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    51 │       │       │       │        │       │               │       │# incoming beam                                                                                                                                                                                       
    52 │       │       │       │        │       │               │       │beam_in = create_gaussian_beam(n_particles,                                                                                                                                                           
    53 │       │       │       │        │       │               │       │                               mean = torch.zeros(6)*1e-3,                                                                                                                                            
    54 │       │       │       │        │       │               │       │                               cov = torch.eye(6)*1e-6,                                                                                                                                               
    55 │       │       │       │        │       │               │       │                               s = torch.tensor(0.0),                                                                                                                                                 
    56 │       │       │       │        │       │               │       │                               p0c = torch.tensor(4e7),                                                                                                                                               
    57 │       │       │       │        │       │               │       │                               mc2 = torch.tensor(M_ELECTRON))                                                                                                                                        
    58 │       │       │       │        │       │               │       │                                                                                                                                                                                                      
    59 │       │       │       │        │       │               │       │# model evaluation and backward pass                                                                                                                                                                  
    60 │       │       │       │        │       │               │       │k_set = torch.zeros(n_quadrupoles, requires_grad=True)                                                                                                                                                
    61 │       │       │       │        │       │               │       │#scalene_profiler.start()                                                                                                                                                                             
    62 │       │       │       │        │       │               │       │model = BeamlineModel(k_set, l_d, l_q, beam_in, sigma_t)                                                                                                                                              
    63 │       │       │       │        │       │               │       │loss = model()                                                                                                                                                                                        
    64 │       │       │       │        │       │               │       │loss.backward()                                                                                                                                                                                       
    65 │       │       │       │        │       │               │       │#scalene_profiler.stop()                                                                                                                                                                              
       ╵       ╵       ╵       ╵        ╵       ╵               ╵       ╵                                                                                                                                                                                                      
Top PEAK memory consumption, by line:
(1)    39:   210 MB                                                                                                                                                                                                                                                             
(2)     9:    60 MB                                                                                                                                                                                                                                                             
